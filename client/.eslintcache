[{"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\index.js":"1","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\App.js":"2","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Nav\\Nav.js":"3","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Medicines\\Medicines.js":"4","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Home\\Home.js":"5","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Login\\Login.js":"6","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Appointment\\Appointment.js":"7","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Signup\\Signup.js":"8","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\About\\About.js":"9","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Schedule\\Schedule.js":"10","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\HealthArticles\\HealthArticles.js":"11","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Diagnostics\\Diagnostics.js":"12","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\GlobalState.js":"13","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\auth.js":"14","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\api.js":"15","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\queries.js":"16","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\mutations.js":"17","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\reducers.js":"18","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\actions.js":"19"},{"size":305,"mtime":1619346194000,"results":"20","hashOfConfig":"21"},{"size":4940,"mtime":1626682324579,"results":"22","hashOfConfig":"21"},{"size":3478,"mtime":1626539178912,"results":"23","hashOfConfig":"21"},{"size":2939,"mtime":1619346194000,"results":"24","hashOfConfig":"21"},{"size":2074,"mtime":1619346194000,"results":"25","hashOfConfig":"21"},{"size":4303,"mtime":1619346194000,"results":"26","hashOfConfig":"21"},{"size":8240,"mtime":1619346194000,"results":"27","hashOfConfig":"21"},{"size":3251,"mtime":1626533627152,"results":"28","hashOfConfig":"21"},{"size":3729,"mtime":1626668091013,"results":"29","hashOfConfig":"21"},{"size":5415,"mtime":1619346194000,"results":"30","hashOfConfig":"21"},{"size":2867,"mtime":1626542077544,"results":"31","hashOfConfig":"21"},{"size":2427,"mtime":1626541016251,"results":"32","hashOfConfig":"21"},{"size":496,"mtime":1619346194000,"results":"33","hashOfConfig":"21"},{"size":1015,"mtime":1619346194000,"results":"34","hashOfConfig":"21"},{"size":1003,"mtime":1619346194000,"results":"35","hashOfConfig":"21"},{"size":216,"mtime":1619346194000,"results":"36","hashOfConfig":"21"},{"size":1561,"mtime":1619346194000,"results":"37","hashOfConfig":"21"},{"size":665,"mtime":1619346194000,"results":"38","hashOfConfig":"21"},{"size":162,"mtime":1619346194000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"bcinwr",{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"42"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"42"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\index.js",[],["85","86"],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\App.js",["87","88"],"import React, { useState } from \"react\";  //panel\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  Link,\n  Redirect,\n  BrowserRouter,\n} from \"react-router-dom\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\n//import { BrowserRouter as Router, Switch} from \"react-router-dom\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport { ChakraProvider, Grid, GridItem } from \"@chakra-ui/react\";\nimport Nav from \"./components/Nav/Nav\";\nimport Home from \"./components/Home/Home\";\nimport Login from \"./components/Login/Login\";\nimport Signup from \"./components/Signup/Signup\";\nimport Schedule from \"./components/Schedule/Schedule\";\nimport Appointment from \"./components/Appointment/Appointment\";\nimport About from \"./components/About/About\";\nimport Medicines from \"./components/Medicines/Medicines\";\nimport Diagnostics from \"./components/Diagnostics/Diagnostics\";\nimport HealthArticles from \"./components/HealthArticles/HealthArticles\";\nimport { StoreProvider } from \"./utils/GlobalState\";\n\n\nimport \"./App.css\";\n<link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta3/dist/css/bootstrap.min.css\"> </link>\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem(\"id_token\");\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : \"\",\n      },\n    });\n  },\n  uri: \"/graphql\",\n});\n\nfunction App() {\n  const commands = [\n    {\n      command: [\"go to * page\", \"go to *\", \"open * page\", \"open *\"],\n      callback: (redirectPage) => setRedirectUrl(redirectPage),\n    },\n  ];\n\n  const { transcript } = useSpeechRecognition({ commands });\n  const [redirectUrl, setRedirectUrl] = useState(\"\");\n  const pages = [\n    \"home\",\n    \"login\",\n    \"about\",\n    \"health\",\n    \"diagnostics\",\n    \"medicines\",\n    \"sign\",\n    \"appointment\",\n    \"schedule\",\n  ];\n  const urls = {\n    home: \"/\",\n    login: \"/login\",\n    about: \"/About\",\n    health:\"/HealthArticles\",\n    diagnostics: \"/Diagnostics\",\n    medicines: \"/Medicines\",\n    sign: \"/Signup\",\n    appointment: \"/Appointment\",\n    schedule: \"/Schedule\",\n  };\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return null;\n  }\n\n  let redirect = \"\";\n\n  if (redirectUrl) {\n    if (pages.includes(redirectUrl)) {\n      redirect = <Redirect to={urls[redirectUrl]} />;\n    } else {\n      redirect = <p>Could not find page: {redirectUrl}</p>;\n    }\n  }\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"bg\">\n          \n          <StoreProvider>\n            <ChakraProvider>\n              <Nav />\n              {/*Layout for the app using Chakra-UI */}\n              <Grid\n                h=\"85vh\"\n                templateRows=\"repeat(9, 1fr)\"\n                templateColumns=\"repeat(7, 1fr)\"\n                gap={4}\n              >\n                <GridItem rowSpan={9} colSpan={1} bg=\"transparent\" />\n                <GridItem rowSpan={1} colSpan={5} bg=\"transparent\" />\n                <GridItem rowSpan={9} colSpan={1} bg=\"transparent\" />\n                <GridItem rowSpan={7} colSpan={5} bg=\"transparent\">\n                  <GridItem rowSpan={1} colSpan={5} bg=\"transparent\" />\n                  <GridItem rowSpan={9} colSpan={5} bg=\"transparent\" />\n                  <GridItem rowSpan={7} colSpan={1} bg=\"transparent\" />\n                  <GridItem rowSpan={9} colSpan={5} bg=\"transparent\" />\n\n                  <BrowserRouter>\n                    <Route exact path=\"/\" component={Home} />\n                    <Route exact path=\"/login\" component={Login} />\n                    <Route exact path=\"/signup\" component={Signup} />\n                    <Route exact path=\"/schedule\" component={Schedule} />\n                    <Route exact path=\"/Appointment\" component={Appointment} />\n                    <Route exact path=\"/Medicines\" component={Medicines} />\n                    <Route exact path=\"/Diagnostics\" component={Diagnostics} />\n                    <Route exact path=\"/About\" component={About} />\n                    <Route\n                      exact\n                      path=\"/HealthArticles\"\n                      component={HealthArticles}\n                    />\n\n                    {redirect}\n                  </BrowserRouter>\n                  <div className=\"Voice\">\n                    <p id=\"Transcript\"><b>Transcript:{transcript}</b></p>\n                    <button onClick={SpeechRecognition.startListening}>\n                      <b>Start</b>\n                    </button>\n                  </div>\n                </GridItem>\n                <GridItem rowSpan={9} colSpan={5} bg=\"transparent\" />\n              </Grid>\n\n              {/*Layout for the app using Chakra-UI */}\n            </ChakraProvider>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Nav\\Nav.js",["89"],"\nimport React from \"react\";\nimport { Box, Heading, Flex, Text, Button, Link } from \"@chakra-ui/react\";\nimport \"./Nav.css\";\nimport Auth from \"../../utils/auth\"\nimport logo from './virtualmediclogo.png';\n\nconst MenuItems = ({ children }) => (\n  <Text mt={{ base: 4, md: 0 }} mr={6} display=\"block\">\n    {children}\n  </Text>\n);\n\n// Note: This code could be better, so I'd recommend you to understand how I solved and you could write yours better :)\nconst Nav = props => {\n  const [show, setShow] = React.useState(false);\n  const handleToggle = () => setShow(!show);\n\n  return (\n    <Flex\n      as=\"nav\"\n      align=\"center\"\n      justify=\"space-between\"\n      wrap=\"wrap\"\n      padding=\"1.5rem\"\n      bgColor=\"maroon\"\n      color=\"white\"\n      borderRadius=\"sm\"\n      {...props}\n    >\n      <Flex align=\"center\" mr={5}>\n        <Heading as=\"h1\" size=\"2xl\" letterSpacing={\"-.1rem\"} >\n        <Link href=\"/\">  \n        <img src={logo} width=\"180\" height=\"\"/>\n        </Link>\n        </Heading>\n      </Flex>\n\n      <Box display={{ base: \"block\", md: \"none\" }} onClick={handleToggle}>\n        <svg\n          fill=\"white\"\n          width=\"12px\"\n          viewBox=\"0 0 20 20\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <title>Menu</title>\n          <path d=\"M0 3h20v2H0V3zm0 6h20v2H0V9zm0 6h20v2H0v-2z\" />\n        </svg>\n      </Box>\n\n      <Box\n        display={{ sm: show ? \"block\" : \"none\", md: \"flex\" }}\n        width={{ sm: \"full\", md: \"auto\" }}\n        alignItems=\"center\"\n        flexGrow={1}\n      >\n        <MenuItems className=\"active\" >\n        {\n          Auth.loggedIn() ?\n              <Link href=\"/Appointment\">My Appointment</Link>\n                :\n                null\n        }\n        </MenuItems>\n\n        <MenuItems>\n        {\n          Auth.loggedIn() ?\n          <Link href=\"/schedule\">Schedule a Video Call</Link>\n            :\n          <Link href=\"/\">Schedule a Video Call</Link>\n        }\n        </MenuItems>\n\n        <MenuItems>\n        {\n          Auth.loggedIn() ?\n          <Link href=\"/signup\">Sign up</Link>\n            :\n          <Link href=\"/signup\">Sign up</Link>\n        }\n        </MenuItems>\n        \n        \n\n        <MenuItems>\n        {\n          Auth.loggedIn() ?\n          <Link href=\"/Diagnostics\">Diagnostics</Link>\n            :\n          <Link href=\"/Diagnostics\">Diagnostics</Link>\n        }\n        </MenuItems>\n\n        <MenuItems>\n        {\n          Auth.loggedIn() ?\n          <Link href=\"/Medicines\">Medicines</Link>\n            :\n          <Link href=\"/Medicines\">Medicines</Link>\n        }\n        </MenuItems>\n\n        <MenuItems>\n        {\n          Auth.loggedIn() ?\n          <Link href=\"/HealthArticles\">Health Articles</Link>\n            :\n          <Link href=\"/HealthArticles\">Health Articles</Link>\n        }\n        </MenuItems>\n        <MenuItems>\n        {\n          Auth.loggedIn() ?\n          <Link href=\"/About\">About Us</Link>\n            :\n          <Link href=\"/About\">About Us</Link>\n        }\n        </MenuItems>\n\n      </Box>\n\n      <Box\n        display={{ sm: show ? \"block\" : \"none\", md: \"block\" }}\n        mt={{ base: 4, md: 0 }}\n      >\n        <Button bg=\"transparent\" border=\"1px\">\n        {\n          Auth.loggedIn() ?\n            <Link href=\"/logout\" onClick={() => Auth.logout()} bg=\"transparent\">Logout</Link>\n            :\n            <Link href=\"/login\" bg=\"transparent\">Log In</Link>\n        }\n        </Button>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default Nav;\n\n\n","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Medicines\\Medicines.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Home\\Home.js",["90","91"],"import React from \"react\";\nimport { Container, Text, Heading, Box, Center } from \"@chakra-ui/react\";\nimport logo from './virtualmediclogo.png';\nimport \"./home.css\";\n\n\n\n\n\n\n\n  \n\nconst Home = () => {\n\nreturn (\n\n  //<Container maxW=\"xl\" centerContent>\n      <Center>\n        <Box \n        padding=\"6\"  \n        bgColor=\"white\"\n        boxShadow=\"dark-lg\"\n        borderRadius=\"lg\" \n        color=\"black\" \n        maxW=\"3xl\"\n        width=\"100%\"\n        > \n\n        <Heading as=\"h1\" size=\"xl\" mb=\"5\" color=\"grey\" >\n          <Center>\n            \n           Welcome to\n        \n        \n          </Center>\n        </Heading>\n        <Center>\n        <img src={logo} width=\"180\" height=\"\"/>\n        </Center>\n          \n        <div className=\"text\">\n        <Text fontSize=\"xl\" > \n          <Center>\n            Visit your Doctor from Anywhere! 24/7 Consultation.\n          </Center>\n        </Text>\n        \n        </div>\n\n        <div className=\"text\">\n        <Text fontSize=\"lg\" color=\"grey\" > \n          <Center>\n            Get Instant Medical help in Just three steps. As Simple as 1,2,3\n            \n          </Center>\n        </Text>\n        \n        </div>\n        <div className=\"cardcontainer\">\n        <div class=\"card\">\n          \n          <div class=\"card__cover cover1\">\n              \n          </div>\n\n          \n          <div class=\"card__content\">\n             <Center>Signup</Center> \n          </div>\n          \n         </div>\n\n\n         <div class=\"card\">\n          \n          <div class=\"card__cover cover2\">\n              \n          </div>\n\n          \n          <div class=\"card__content\">\n             <Center>Schedule a Video Call</Center> \n          </div>\n          \n         </div>\n\n         <div class=\"card\">\n          \n          <div class=\"card__cover\">\n              \n          </div>\n\n          \n          <div class=\"card__content\">\n             <Center>Join the Video Call</Center> \n          </div>\n          \n         </div>\n        </div>\n\n        \n        </Box>\n      </Center>\n  //</Container>\n  \n  \n);\n};\n\n\nexport default Home;\n","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Login\\Login.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Appointment\\Appointment.js",["92"],"import React, { useState, useEffect } from \"react\";\nimport { useMutation, useQuery, /* useDisclosure */ } from '@apollo/react-hooks';\nimport { CANCEL_APPOINTMENT, CHANGE_APPOINTMENT } from \"../../utils/mutations\";\nimport { Link } from \"react-router-dom\";\nimport { Container, \n          Heading, \n          FormControl, \n          FormLabel, \n          Input, \n          Button, \n          ButtonGroup,\n          Select, \n          Text, \n          Box, \n        Flex } from \"@chakra-ui/react\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport 'react-calendar/dist/Calendar.css';\nimport { ME } from \"../../utils/queries\";\n\n\nfunction Appointment() {\n    // defining a state for the time for the schedule\n  const [,  setStartDate] = useState(new Date());\n  const [ok, setOK] = useState(false);\n  const [deleted, setDeleted] = useState(false);\n  let email = '';\n  const {data} = useQuery(ME);\n  //let a = data.me.email;\n  console.log(data);\n    \n    // defining a custon input for the datepicker\n    const CustomInput = ({ value, onClick }) => (\n        <Input type=\"day\" placeholder=\"mm/dd/yyy\"\n                name=\"day\"\n                color=\"black\"\n                onClick={onClick}\n                onChange={handleChange}\n                value={formState.day}/>\n      ); \n\n  const [formState, setFormState] = useState({ day: '', time: ''});\n  const [isData, setIsData] = useState(false);\n\n  const [removeAppointment] = useMutation(CANCEL_APPOINTMENT);\n  const [changeAppointment] = useMutation(CHANGE_APPOINTMENT);\n \n  const [link, setLink] = useState('');\n\n  useEffect(() => {\n    if(data){\n      if(data.me.appointment[0])\n      {\n        console.log(data.me.appointment[0]);\n         setLink(data.me.appointment[0].link); \n         email = data.me.email;\n         setFormState({...formState, day: data.me.appointment[0].day, time:data.me.appointment[0].time })\n         setIsData(true);\n      }\n     \n    }\n    \n  }, [data]);\n  \n  const handleFormSubmitCancel = async event => {\n    event.preventDefault();\n\n    if(data.me.appointment[0])\n    {\n\n      try{\n        const info = await removeAppointment({\n       variables: {\n         day: formState.day, time: formState.time, link: link\n       }\n     });\n   \n     console.log(info);\n \n     }catch (e) {\n         console.log(e)\n     }\n  \n \n     /*****************************************************/\n     /**Sending the mail with nodemailer */\n \n     let response = await fetch('/mail', {\n       method: \"POST\",\n       body: JSON.stringify({\n           day: formState.day,\n           time: formState.time,\n           link: link,\n           mail: email, \n           subject: 'Appointment Canceled on '\n       }),\n       headers: {\n           Accept: 'application/json',\n           'Content-Type': 'application/json'\n         },\n     }),\n       message = await response.json();\n       console.log(message);\n         //window.location.reload('/'); // we need to make anoter component to congratule the success of the operation\n \n     /*****************************************************/\n \n     /*****************setOK all operations ok***********************/\n    \n     setDeleted(true);\n     \n     /*****************************************************/\n\n    }\n    else{\n      setDeleted(false)\n    }\n    \n  };\n\n  const handleFormSubmitUpdate = async event => {\n      event.preventDefault();\n  \n      try{\n  \n         await changeAppointment({     \n               variables: {day: formState.day, time: formState.time, link: link }    \n              })\n    /*   \n      if(data)\n           email = data.me.email; */\n  \n      }catch (e) {\n          console.log(e)\n      }\n  \n      /*****************************************************/\n      /**Sending the mail with nodemailer */\n  \n      let response = await fetch('/mail', {\n        method: \"POST\",\n        body: JSON.stringify({\n            day: formState.day,\n            time: formState.time,\n            link: link,\n            mail: email, \n            subject: 'Appointment Rescheduled on '\n        }),\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json'\n          },\n      }),\n        message = await response.json();\n        console.log(message);\n          //window.location.reload('/'); // we need to make anoter component to congratule the success of the operation\n  \n      /*****************************************************/\n  \n      /*****************setOK all operations ok***********************/\n     \n      setOK(true);\n      \n      /*****************************************************/\n    };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <Container>\n    <Box \n        padding=\"4\"  \n        bgcolor=\"white\"\n        bgGradient=\"linear(to-r,blue.900,gray.500,blue.900)\" \n        borderRadius=\"lg\" \n        color=\"black\" \n        maxW=\"3xl\"> \n      <Heading  color=\"white\" as=\"h2\" size=\"xl\" fontSize={{ base: \"16px\", md: \"20px\", lg: \"30px\" }} padding=\"3\">My Appointment</Heading>\n     {\n      isData ?\n        <FormControl isRequired>\n        <FormLabel color=\"white\">Select day</FormLabel>\n        <DatePicker id=\"day\" name=\"day\"\n              dateFormat=\"MM/dd/yyyy\"\n              minDate={new Date()}\n              onChange={date => {setStartDate(date); setFormState({...formState, day: date.toLocaleDateString(\"en-US\")});}}\n              customInput={<CustomInput/>}\n          />\n        <FormLabel color=\"white\">Time (Hr)</FormLabel>\n        <Select placeholder=\"Select option\" id=\"time\" name=\"time\" defaultValue={formState.time} onChange={handleChange} focusBorderColor=\"blue\" color=\"white\" borderColor=\"blue\">\n              <option value=\"12:00pm\">12:00pm</option>\n              <option value=\"2:00pm\">2:00pm</option>\n              <option value=\"4:00pm\">4:00pm</option>\n          </Select>\n          { !ok ?\n          <Text color=\"white\" fontSize=\"sm\" py=\"3\">Link: <a href={link} target=\"_blank\" rel=\"noreferrer\">{link}</a></Text>\n              : \n              null\n          } \n           { deleted ?\n            <Box>\n              <Text  padding=\"3\"></Text>\n                <Text color=\"white\" fontSize=\"sm\">Your Appointment has been Canceled!</Text>   \n            </Box>\n            : null\n           }\n           { ok ?\n            <Box>\n              <Text  padding=\"3\"></Text>\n                <Text color=\"white\" fontSize={{ base: \"8px\", md: \"12px\", lg: \"16px\" }}>An email was sent with the information below </Text>\n                <Box borderRadius=\"md\">\n                    <Text color=\"white\" fontSize={{ base: \"8px\", md: \"12px\", lg: \"16px\" }}>Day: {formState.day} </Text>\n                    <Text color=\"white\" fontSize={{ base: \"8px\", md: \"12px\", lg: \"16px\" }}>Time: {formState.time}</Text>\n                    <Text color=\"white\" fontSize={{ base: \"8px\", md: \"12px\", lg: \"16px\" }} >Link: <a href={link} target=\"_blank\" rel=\"noreferrer\">{link}</a></Text>\n                </Box>   \n            </Box>\n            : null\n           }\n           <Flex>\n              <Box>\n              <ButtonGroup flexWrap=\"wrap\" size=\"sm\" spacing=\"4\">\n                  <Button\n                      mt={4}\n                      colorScheme=\"teal\"\n                      type=\"submit\"\n                      onClick={handleFormSubmitUpdate}\n                  >\n                  Reschedule\n                  </Button>\n                  <Button\n                      mt={4}\n                      colorScheme=\"teal\"\n                      type=\"submit\"\n                      onClick={handleFormSubmitCancel}\n                  >\n                  Cancel\n                  </Button>\n              </ButtonGroup>\n              </Box> \n              \n           </Flex>        \n        </FormControl>        \n        :\n        <Box>\n          <Text color=\"white\" fontSize=\"sm\" py=\"3\">You don't have an Appointment Registered</Text>\n          <Link to=\"/schedule\">\n          <Text color=\"white\" fontSize=\"sm\">\n                  ← Go to Schedule\n          </Text>       \n        </Link>\n      </Box>\n\n      \n    }\n       \n    </Box>\n    </Container>\n\n  );\n\n}\n\nexport default Appointment;\n","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Signup\\Signup.js",["93","94"],"import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../../utils/auth\";\nimport \"./signup.css\";\nimport { ADD_USER } from \"../../utils/mutations\";\nimport { Container, Box, Text, Heading, FormControl, FormLabel, Input, Button, Center } from \"@chakra-ui/react\";\n\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    console.log(mutationResponse);\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    //<Container>\n    <Center>\n      <Box \n      className=\"maindivi\"\n      padding=\"4\"  \n      bgColor=\"white\"\n      boxShadow=\"dark-lg\"\n      borderRadius=\"lg\" \n      color=\"black\"\n      maxW=\"3xl\"\n      bgColor=\"wheat\"> \n      \n      \n        <div className=\"leftdivi\">\n\n        </div>\n\n        <div className=\"rightdivi\">\n        <Heading  color=\"White\" as=\"h6\" padding=\"3\" align=\"center\">Signup</Heading>\n      <FormControl>\n              <FormLabel color=\"black\">First Name</FormLabel>\n              <Input type=\"firstName\" placeholder=\"Your First Name\"\n                  name=\"firstName\"\n                  id=\"firstName\"\n                  color=\"black\"\n                  onChange={handleChange}/>\n                  <FormLabel color=\"black\">Last Name</FormLabel>\n              <Input type=\"lastName\" placeholder=\"Your Last Name\"\n                  name=\"lastName\"\n                  id=\"lastName\"\n                  color=\"black\"\n                  onChange={handleChange}/>\n              <FormLabel color=\"black\">Email address</FormLabel>\n              <Input type=\"email\" placeholder=\"youremail@test.com\"\n                  name=\"email\"\n                  id=\"email\"\n                  color=\"black\"\n                  onChange={handleChange}/>\n              <FormLabel color=\"black\">Password</FormLabel>\n              <Input placeholder=\"******\" type=\"password\"\n                  name=\"password\"            \n                  id=\"pwd\"\n                  color=\"black\"\n                  onChange={handleChange} />\n            <Button\n                mt={4}\n                width=\"100%\"\n                colorScheme=\"blue\"\n                type=\"submit\"\n                textAlign=\"center\"\n                onClick={handleFormSubmit}\n              >\n                Submit\n              </Button>\n\n              <Center><Link to=\"/login\">\n                <Text color=\"blue\" fontSize=\"sm\"\n                mt={4}\n                >\n                  Already have an account? <strong>Login</strong>\n                </Text>       \n              </Link>\n              </Center>\n      </FormControl>\n        </div>\n     \n      </Box>\n    </Center>\n   // </Container>\n\n  );\n\n}\n\nexport default Signup;\n","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\About\\About.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Schedule\\Schedule.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\HealthArticles\\HealthArticles.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\components\\Diagnostics\\Diagnostics.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\GlobalState.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\auth.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\api.js",["95"],"const newRoomEndpoint =\n  `https://api.daily.co/v1/rooms`; // API\n\n/**\n * Create a short-lived room for demo purposes.\n *\n * It uses the redirect proxy as specified in netlify.toml`\n * This will work locally if you following the Netlify specific instructions\n * in README.md\n *\n * See https://docs.daily.co/reference#create-room for more information on how\n * to use the Daily REST API to create rooms and what options are available. \n */\nasync function createRoom() {\n\n  const exp = Math.round(Date.now() / 1000) + 60 * 30; //it is just last 30 min the room... we need it last the time the meeting is set\n  const options = {\n    properties: {\n      exp: exp,\n    },\n  };\n  let response = await fetch(newRoomEndpoint, {\n    method: \"POST\",\n    body: JSON.stringify(options),\n    headers: {\n      Authorization: \"Bearer 6f137cc133efcb55ef2f00e4e042f76442ae03e2b444c89b5dbbe7376f328b22\" // that's my API key\n    },\n  }),\n    room = await response.json();\n  return room;\n\n}\n\nexport default { createRoom };\n","D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\queries.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\mutations.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\reducers.js",[],"D:\\MERN STACK projects\\VirtualMedic-main\\client\\src\\utils\\actions.js",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":5,"column":3,"nodeType":"102","messageId":"103","endLine":5,"endColumn":9},{"ruleId":"100","severity":1,"message":"104","line":6,"column":3,"nodeType":"102","messageId":"103","endLine":6,"endColumn":7},{"ruleId":"105","severity":1,"message":"106","line":34,"column":9,"nodeType":"107","endLine":34,"endColumn":48},{"ruleId":"100","severity":1,"message":"108","line":2,"column":10,"nodeType":"102","messageId":"103","endLine":2,"endColumn":19},{"ruleId":"105","severity":1,"message":"106","line":39,"column":9,"nodeType":"107","endLine":39,"endColumn":48},{"ruleId":"109","severity":1,"message":"110","line":57,"column":18,"nodeType":"111","endLine":57,"endColumn":31},{"ruleId":"100","severity":1,"message":"108","line":7,"column":10,"nodeType":"102","messageId":"103","endLine":7,"endColumn":19},{"ruleId":"112","severity":1,"message":"113","line":46,"column":7,"nodeType":"114","messageId":"115","endLine":46,"endColumn":22},{"ruleId":"116","severity":1,"message":"117","line":34,"column":1,"nodeType":"118","endLine":34,"endColumn":31},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'Switch' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Container' is defined but never used.","react-hooks/exhaustive-deps","Assignments to the 'email' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","MemberExpression","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]